# For additional information and help on this file, see https://github.com/jmmcatee/cracklord/wiki/Configuration-Files#queue
[General]
# The path to the root of the web server files.  By default this should include
# the AngularJS web application that comes with CrackLord or any other GUI
# that you would like served to the end user.
WebRoot=/var/cracklord/www

# The next three directives are used to both authenticate resources that try
# and connect, as well as encrypted communication between the queue and resource

# The full path to the certificate authority public key used on the Queue server.
CACertFile=/etc/cracklord/ssl/cracklord_ca.pem
# The full path to the private key file used for the queue server CA
CAKeyFile=/etc/cracklord/ssl/cracklord_ca.key
# The full path to the public certificate 
CertFile=/etc/cracklord/ssl/queued.crt
# The full path to the private key 
KeyFile=/etc/cracklord/ssl/queued.key

# The following two directives are optional. They are used to identify a TLS private
# key and certificate for just the web API of cracklord. Use this if you want to 
# have the Queue and Resources communicate with self-signed or internal CA generated
# certificates, but want a valid (signed by trusted CA) API certificate
#APICertFile=/etc/cracklord/ssl/api_cert.crt
#APIKeyFile=/etc/cracklord/ssl/api_key.key

# The IP address and port to listen for API and web server connections
BindIP=0.0.0.0
BindPort=443

# The file where logs will be written to
LogFile=/var/log/cracklord/queued.log
# The level of messages for logs (Debug, Info, Warn, Error, Fatal, Panic)
LogLevel=Info

# The queue server has the ability to write out all job data to a state file on a 
# regular basis.  In the event the server is restarted, this will allow data for
# all existing jobs to be retained, although they will be stopped and cannot be
# restarted.
#StateFile=/var/cracklord/queue.state

# The amount of time between each queue update.  This defaults to 30 seconds.
#UpdateTime=30

# The amount of time before a resource is disconnected in the event we are unable
# to connect to it.  By default this is 5 seconds.
#ResourceTimeout=5

# Authentication can be one of two types, INI or ActiveDirectory.  INI 
# authentication, as configured here by default, will utilize accounts defined 
# below.  Active directory authentication can also be used.  For more information
# see https://github.com/jmmcatee/cracklord/wiki/Configuration-Files
# 
# There are three access levels in CrackLord: 
#   - Admin    - Full access to control everything in the system
#   - Standard - The ability to add jobs, but cannot do anything with resources
#   - ReadOnly - Exactly what it says, can view job information, but cannot add
[Authentication] 
type=INI 
adminuser=admin 
adminpass=changeme 
standarduser=user 
standardpass=changeme 
readonlyuser=read 
readonlypass=changeme 

# The queue server uses resource managers to manage the connections between queue 
# and resources.  By default, the direct connect manager is always enabled.  Check
# the other configuration files for directives specific to those managers
[ResourceManagers]
directconnect=true
#aws=/etc/cracklord/resourcemanagers/aws.conf

# Here we define a set of hooks that can be called upon the completion of 
# various tasks.  It is important to note what types of data are sent, as some
# of the hooks will send hashes or sensitive output to the receiving subscriber.
# For each hook, the type should be defined as either file or web.  File will 
# call a javascript upon completion, web will POST information to a webhook.
[Hooks]

# Called when a job finished.  SENDS BOTH INPUT HASHES AND OUTPUT PLAINTEXT
[Hooks.JobEnd]
# http://example.com/job/finished=web
# /etc/cracklord/hooks/jobpost.js
