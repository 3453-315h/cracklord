package common

import (
	"code.google.com/p/go-uuid/uuid"
	"encoding/json"
	"io"
	"time"
)

const (
	STATUS_CREATED = "created"
	STATUS_RUNNING = "running"
	STATUS_PAUSED  = "paused"
	STATUS_DONE    = "done"
	STATUS_FAILED  = "failed"
	STATUS_QUIT    = "quit"

	RES_CPU = "cpu"
	RES_GPU = "gpu"
)

type Tasker interface {
	Status() Job
	Run() error
	Pause() error
	Quit() Job
	IOE() (io.Writer, io.Reader, io.Reader)
}

type Tooler interface {
	Name() string
	Type() string
	Version() string
	UUID() string
	SetUUID(string)
	Parameters() string
	Requirements() string
	NewTask(Job) (Tasker, error)
}

type Job struct {
	UUID             string            // UUID generated by the Queue
	ToolUUID         string            // ID of the tool to use with this job
	Name             string            // Name of the job
	Status           string            // Status of the job
	Error            string            // Last returned error from the tool
	StartTime        time.Time         // Start time of the job
	ETC              string            // The estimated time of completion
	Owner            string            // Owner provided by the web frontend
	ResAssigned      string            // Resource this job is assinged to if any
	CrackedHashes    int64             // # of hashes cracked
	TotalHashes      int64             // # of hashes provided
	Progress         float64           // # % of cracked/provided
	Parameters       map[string]string // Parameters returned to the tool
	PerformanceData  map[string]string // Some performance status map[timestamp]perf#
	PerformanceTitle string            // Title of the perf #
	OutputData       [][]string        // A 2D array of rows for output values
	OutputTitles     []string          // The headers for the 2D array of rows above
}

func NewJob(tooluuid string, name string, owner string, params map[string]string) Job {
	return Job{
		UUID:            uuid.New(),
		ToolUUID:        tooluuid,
		Name:            name,
		Status:          STATUS_CREATED,
		Owner:           owner,
		Parameters:      params,
		PerformanceData: make(map[string]string),
	}
}

type Tool struct {
	Name         string
	Type         string
	Version      string
	UUID         string
	Parameters   string
	Requirements string
}

// Compare two Tools to see if they are the same
func CompareTools(t1, t2 Tool) bool {
	if t1.Name != t2.Name {
		return false
	}

	if t1.Type != t2.Type {
		return false
	}

	if t1.Version != t2.Version {
		return false
	}

	if t1.Parameters != t2.Parameters {
		return false
	}

	if t1.Requirements != t2.Requirements {
		return false
	}

	return true
}

type ToolJSONForm struct {
	Form   json.RawMessage `json:"form"`
	Schema json.RawMessage `json:"schema"`
}

type RPCCall struct {
	Auth string
	Job  Job
}
